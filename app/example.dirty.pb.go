// Code generated by protoc-gen-go-dirty. DO NOT EDIT.
package examplepb

import (
	example_proto "example.proto"
)

import (
	"google.golang.org/protobuf/proto"
)

type DirtyCallback func(field int32)

type DirtyTracker interface {
	IsDirty(field int32) bool
	SetDirty(field int32)
	ResetDirty(field int32)
	ResetAllDirty()
	SetOnDirtyCallback(callback DirtyCallback)
}

type dirtyAddress struct {
	Address
	dirtyFields     map[int32]bool
	onDirtyCallback DirtyCallback
}

func (x *dirtyAddress_City) City() string {
	return x.City
}

func (x *dirtyAddress_City) SetCity(value string) {
	if x.City() != value {
		x.City = value
		x.setDirty(1)
	}
}

func (x *dirtyAddress_State) State() string {
	return x.State
}

func (x *dirtyAddress_State) SetState(value string) {
	if x.State() != value {
		x.State = value
		x.setDirty(2)
	}
}

func (x *dirtyAddress) IsDirty(field int32) bool {
	return x.dirtyFields[field]
}

func (x *dirtyAddress) SetDirty(field int32) {
	x.dirtyFields[field] = true
}

func (x *dirtyAddress) ResetDirty(field int32) {
	delete(x.dirtyFields, field)
}

func (x *dirtyAddress) ResetAllDirty() {
	x.dirtyFields = make(map[int32]bool)
}

func (x *dirtyAddress) SetOnDirtyCallback(callback DirtyCallback) {
	x.onDirtyCallback = callback
}

func (x *dirtyAddress) setDirty(field int32) {
	x.dirtyFields[field] = true
	if x.onDirtyCallback != nil {
		x.onDirtyCallback(field)
	}
}

type dirtyUser struct {
	User
	dirtyFields     map[int32]bool
	onDirtyCallback DirtyCallback
}

func (x *dirtyUser_Id) Id() string {
	return x.Id
}

func (x *dirtyUser_Id) SetId(value string) {
	if x.Id() != value {
		x.Id = value
		x.setDirty(1)
	}
}

func (x *dirtyUser_Name) Name() string {
	return x.Name
}

func (x *dirtyUser_Name) SetName(value string) {
	if x.Name() != value {
		x.Name = value
		x.setDirty(2)
	}
}

func (x *dirtyUser_Age) Age() int32 {
	return x.Age
}

func (x *dirtyUser_Age) SetAge(value int32) {
	if x.Age() != value {
		x.Age = value
		x.setDirty(3)
	}
}

func (x *dirtyUser_Address) Address() *example_proto.Address {
	return x.Address
}

func (x *dirtyUser_Address) SetAddress(value *example_proto.Address) {
	if x.Address() != value {
		x.Address = value
		x.setDirty(4)
	}
}

func (x *dirtyUser_AddressMap) AddressMap() *example_proto.AddressMapEntry {
	return x.AddressMap
}

func (x *dirtyUser_AddressMap) SetAddressMap(value *example_proto.AddressMapEntry) {
	if x.AddressMap() != value {
		x.AddressMap = value
		x.setDirty(5)
	}
}

func (x *dirtyUser_AddressList) AddressList() *example_proto.Address {
	return x.AddressList
}

func (x *dirtyUser_AddressList) SetAddressList(value *example_proto.Address) {
	if x.AddressList() != value {
		x.AddressList = value
		x.setDirty(6)
	}
}

func (x *dirtyUser) IsDirty(field int32) bool {
	return x.dirtyFields[field]
}

func (x *dirtyUser) SetDirty(field int32) {
	x.dirtyFields[field] = true
}

func (x *dirtyUser) ResetDirty(field int32) {
	delete(x.dirtyFields, field)
}

func (x *dirtyUser) ResetAllDirty() {
	x.dirtyFields = make(map[int32]bool)
}

func (x *dirtyUser) SetOnDirtyCallback(callback DirtyCallback) {
	x.onDirtyCallback = callback
}

func (x *dirtyUser) setDirty(field int32) {
	x.dirtyFields[field] = true
	if x.onDirtyCallback != nil {
		x.onDirtyCallback(field)
	}
}
