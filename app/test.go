// Code generated by protoc-gen-go-dirty. DO NOT EDIT.
// source: example.proto
package examplepb

type dirtyAddress struct {
	City            Address_City
	State           Address_State
	dirtyFields     map[int32]bool
	onDirtyCallback DirtyCallback
}

func (x *Address) GetCity() Address_City {
	return x.City
}
func (x *Address) SetCity(value Address_City) {
	if x.GetCity() != value {
		x.City = value
		x.setDirty(1)
	}
}
func (x *Address) GetState() Address_State {
	return x.State
}
func (x *Address) SetState(value Address_State) {
	if x.GetState() != value {
		x.State = value
		x.setDirty(2)
	}
}
func (x *Address) isDirty(fieldNumber int32) bool {
	return x.dirtyFields[fieldNumber]
}
func (x *Address) setDirty(fieldNumber int32) {
	if x.dirtyFields == nil {
		x.dirtyFields = make(map[int32]bool)
	}
	x.dirtyFields[fieldNumber] = true
	if x.onDirtyCallback != nil {
		x.onDirtyCallback(x, fieldNumber)
	}
}
func (x *Address) clearDirty(fieldNumber int32) {
	delete(x.dirtyFields, fieldNumber)
}
func (x *Address) clearAllDirty() {
	x.dirtyFields = make(map[int32]bool)
}
func (x *Address) setOnDirtyCallback(callback DirtyCallback) {
	x.onDirtyCallback = callback
}

type DirtyCallback func(object *Address, fieldNumber int32)
type dirtyUser struct {
	Id              User_Id
	Name            User_Name
	Age             User_Age
	Address         User_Address
	AddressMap      map[int32]message
	AddressList     []Address
	dirtyFields     map[int32]bool
	onDirtyCallback DirtyCallback
}

func (x *User) GetId() User_Id {
	return x.Id
}
func (x *User) SetId(value User_Id) {
	if x.GetId() != value {
		x.Id = value
		x.setDirty(1)
	}
}
func (x *User) GetName() User_Name {
	return x.Name
}
func (x *User) SetName(value User_Name) {
	if x.GetName() != value {
		x.Name = value
		x.setDirty(2)
	}
}
func (x *User) GetAge() User_Age {
	return x.Age
}
func (x *User) SetAge(value User_Age) {
	if x.GetAge() != value {
		x.Age = value
		x.setDirty(3)
	}
}
func (x *User) GetAddress() User_Address {
	return x.Address
}
func (x *User) SetAddress(value User_Address) {
	if x.GetAddress() != value {
		x.Address = value
		x.setDirty(4)
	}
}

type dirtyAddress struct {
	City            Address_City
	State           Address_State
	dirtyFields     map[int32]bool
	onDirtyCallback DirtyCallback
}

func (x *Address) GetCity() Address_City {
	return x.City
}
func (x *Address) SetCity(value Address_City) {
	if x.GetCity() != value {
		x.City = value
		x.setDirty(1)
	}
}
func (x *Address) GetState() Address_State {
	return x.State
}
func (x *Address) SetState(value Address_State) {
	if x.GetState() != value {
		x.State = value
		x.setDirty(2)
	}
}
func (x *Address) isDirty(fieldNumber int32) bool {
	return x.dirtyFields[fieldNumber]
}
func (x *Address) setDirty(fieldNumber int32) {
	if x.dirtyFields == nil {
		x.dirtyFields = make(map[int32]bool)
	}
	x.dirtyFields[fieldNumber] = true
	if x.onDirtyCallback != nil {
		x.onDirtyCallback(x, fieldNumber)
	}
}
func (x *Address) clearDirty(fieldNumber int32) {
	delete(x.dirtyFields, fieldNumber)
}
func (x *Address) clearAllDirty() {
	x.dirtyFields = make(map[int32]bool)
}
func (x *Address) setOnDirtyCallback(callback DirtyCallback) {
	x.onDirtyCallback = callback
}

type DirtyCallback func(object *Address, fieldNumber int32)

func (x *User) GetAddressMap() User_AddressMap {
	return x.AddressMap
}
func (x *User) SetAddressMap(value User_AddressMap) {
	if x.GetAddressMap() != value {
		x.AddressMap = value
		x.setDirty(5)
	}
}

type dirtyUser_AddressMapEntry struct {
	Key             User_AddressMapEntry_Key
	Value           User_AddressMapEntry_Value
	dirtyFields     map[int32]bool
	onDirtyCallback DirtyCallback
}

func (x *User_AddressMapEntry) GetKey() User_AddressMapEntry_Key {
	return x.Key
}
func (x *User_AddressMapEntry) SetKey(value User_AddressMapEntry_Key) {
	if x.GetKey() != value {
		x.Key = value
		x.setDirty(1)
	}
}
func (x *User_AddressMapEntry) GetValue() User_AddressMapEntry_Value {
	return x.Value
}
func (x *User_AddressMapEntry) SetValue(value User_AddressMapEntry_Value) {
	if x.GetValue() != value {
		x.Value = value
		x.setDirty(2)
	}
}

type dirtyAddress struct {
	City            Address_City
	State           Address_State
	dirtyFields     map[int32]bool
	onDirtyCallback DirtyCallback
}

func (x *Address) GetCity() Address_City {
	return x.City
}
func (x *Address) SetCity(value Address_City) {
	if x.GetCity() != value {
		x.City = value
		x.setDirty(1)
	}
}
func (x *Address) GetState() Address_State {
	return x.State
}
func (x *Address) SetState(value Address_State) {
	if x.GetState() != value {
		x.State = value
		x.setDirty(2)
	}
}
func (x *Address) isDirty(fieldNumber int32) bool {
	return x.dirtyFields[fieldNumber]
}
func (x *Address) setDirty(fieldNumber int32) {
	if x.dirtyFields == nil {
		x.dirtyFields = make(map[int32]bool)
	}
	x.dirtyFields[fieldNumber] = true
	if x.onDirtyCallback != nil {
		x.onDirtyCallback(x, fieldNumber)
	}
}
func (x *Address) clearDirty(fieldNumber int32) {
	delete(x.dirtyFields, fieldNumber)
}
func (x *Address) clearAllDirty() {
	x.dirtyFields = make(map[int32]bool)
}
func (x *Address) setOnDirtyCallback(callback DirtyCallback) {
	x.onDirtyCallback = callback
}

type DirtyCallback func(object *Address, fieldNumber int32)

func (x *User_AddressMapEntry) isDirty(fieldNumber int32) bool {
	return x.dirtyFields[fieldNumber]
}
func (x *User_AddressMapEntry) setDirty(fieldNumber int32) {
	if x.dirtyFields == nil {
		x.dirtyFields = make(map[int32]bool)
	}
	x.dirtyFields[fieldNumber] = true
	if x.onDirtyCallback != nil {
		x.onDirtyCallback(x, fieldNumber)
	}
}
func (x *User_AddressMapEntry) clearDirty(fieldNumber int32) {
	delete(x.dirtyFields, fieldNumber)
}
func (x *User_AddressMapEntry) clearAllDirty() {
	x.dirtyFields = make(map[int32]bool)
}
func (x *User_AddressMapEntry) setOnDirtyCallback(callback DirtyCallback) {
	x.onDirtyCallback = callback
}

type DirtyCallback func(object *User_AddressMapEntry, fieldNumber int32)

func (x *User) GetAddressList() User_AddressList {
	return x.AddressList
}
func (x *User) SetAddressList(value User_AddressList) {
	if x.GetAddressList() != value {
		x.AddressList = value
		x.setDirty(6)
	}
}

type dirtyAddress struct {
	City            Address_City
	State           Address_State
	dirtyFields     map[int32]bool
	onDirtyCallback DirtyCallback
}

func (x *Address) GetCity() Address_City {
	return x.City
}
func (x *Address) SetCity(value Address_City) {
	if x.GetCity() != value {
		x.City = value
		x.setDirty(1)
	}
}
func (x *Address) GetState() Address_State {
	return x.State
}
func (x *Address) SetState(value Address_State) {
	if x.GetState() != value {
		x.State = value
		x.setDirty(2)
	}
}
func (x *Address) isDirty(fieldNumber int32) bool {
	return x.dirtyFields[fieldNumber]
}
func (x *Address) setDirty(fieldNumber int32) {
	if x.dirtyFields == nil {
		x.dirtyFields = make(map[int32]bool)
	}
	x.dirtyFields[fieldNumber] = true
	if x.onDirtyCallback != nil {
		x.onDirtyCallback(x, fieldNumber)
	}
}
func (x *Address) clearDirty(fieldNumber int32) {
	delete(x.dirtyFields, fieldNumber)
}
func (x *Address) clearAllDirty() {
	x.dirtyFields = make(map[int32]bool)
}
func (x *Address) setOnDirtyCallback(callback DirtyCallback) {
	x.onDirtyCallback = callback
}

type DirtyCallback func(object *Address, fieldNumber int32)

func (x *User) isDirty(fieldNumber int32) bool {
	return x.dirtyFields[fieldNumber]
}
func (x *User) setDirty(fieldNumber int32) {
	if x.dirtyFields == nil {
		x.dirtyFields = make(map[int32]bool)
	}
	x.dirtyFields[fieldNumber] = true
	if x.onDirtyCallback != nil {
		x.onDirtyCallback(x, fieldNumber)
	}
}
func (x *User) clearDirty(fieldNumber int32) {
	delete(x.dirtyFields, fieldNumber)
}
func (x *User) clearAllDirty() {
	x.dirtyFields = make(map[int32]bool)
}
func (x *User) setOnDirtyCallback(callback DirtyCallback) {
	x.onDirtyCallback = callback
}

type DirtyCallback func(object *User, fieldNumber int32)
