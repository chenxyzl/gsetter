package main

import (
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/pluginpb"
)

func main() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		gen.SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL)

		for _, f := range gen.Files {
			if f.Generate {
				generateFile(gen, f)
			}
		}
		return nil
	})
}

func generateFile(gen *protogen.Plugin, file *protogen.File) {
	g := gen.NewGeneratedFile(file.GeneratedFilenamePrefix+".dirty.pb.go", file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-dirty. DO NOT EDIT.")
	g.P("// source: ", file.Proto.GetName())
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	// Generate dirty tracking code for each message in the file
	for _, msg := range file.Messages {
		generateDirtyTrackingCode(g, msg)
	}
}

//func fieldGoType(g *protogen.GeneratedFile, desc protoreflect.FieldDescriptor) string {
//	switch desc.Kind() {
//	case protoreflect.BoolKind:
//		return "bool"
//	case protoreflect.EnumKind:
//		return g.QualifiedGoIdent(desc.Enum().GoIdent)
//	case protoreflect.Fixed32Kind, protoreflect.Sfixed32Kind, protoreflect.Int32Kind, protoreflect.Sint32Kind, protoreflect.Uint32Kind:
//		return "int32"
//	case protoreflect.Fixed64Kind, protoreflect.Sfixed64Kind, protoreflect.Int64Kind, protoreflect.Sint64Kind, protoreflect.Uint64Kind:
//		return "int64"
//	case protoreflect.FloatKind:
//		return "float32"
//	case protoreflect.DoubleKind:
//		return "float64"
//	case protoreflect.BytesKind:
//		return "[]byte"
//	case protoreflect.StringKind:
//		return "string"
//	case protoreflect.GroupKind, protoreflect.MessageKind:
//		return g.QualifiedGoIdent(desc.Message().GoIdent)
//	default:
//		return ""
//	}
//}

func generateDirtyTrackingCode(g *protogen.GeneratedFile, message *protogen.Message) {
	typeName := message.GoIdent.GoName

	g.P("type dirty", typeName, "struct {")
	for _, field := range message.Fields {
		fieldName := field.GoName
		if field.Desc.IsMap() {
			g.P(fieldName, " map[", field.Desc.MapKey().Kind(), "]", field.Desc.MapValue().Kind())
		} else if field.Desc.IsList() {
			g.P(fieldName, " []", field.Message.GoIdent)
		} else {
			g.P(fieldName, " ", field.GoIdent)
		}
	}
	g.P("dirtyFields map[int32]bool")
	g.P("onDirtyCallback DirtyCallback")
	g.P("}")
	g.P()

	// Generate getter and setter methods for each field
	for _, field := range message.Fields {
		fieldName := field.GoName
		fieldNumber := field.Desc.Number()

		// Generate getter method
		g.P("func (x *", typeName, ") Get", fieldName, "() ", field.GoIdent, " {")
		g.P("return x.", fieldName)
		g.P("}")
		g.P()

		// Generate setter method
		g.P("func (x *", typeName, ") Set", fieldName, "(value ", field.GoIdent, ") {")
		g.P("if x.Get", fieldName, "() != value {")
		g.P("x.", fieldName, " = value")
		g.P("x.setDirty(", fieldNumber, ")")
		g.P("}")
		g.P("}")
		g.P()

		// Generate dirty tracking code for nested messages
		if field.Message != nil {
			generateDirtyTrackingCode(g, field.Message)
		}
	}

	// Generate dirty tracking methods for the message
	generateDirtyTrackingMethods(g, typeName)
}

func generateDirtyTrackingMethods(g *protogen.GeneratedFile, typeName string) {
	// Generate isDirty method
	g.P("func (x *", typeName, ") isDirty(fieldNumber int32) bool {")
	g.P("return x.dirtyFields[fieldNumber]")
	g.P("}")
	g.P()

	// Generate setDirty method
	g.P("func (x *", typeName, ") setDirty(fieldNumber int32) {")
	g.P("if x.dirtyFields == nil {")
	g.P("x.dirtyFields = make(map[int32]bool)")
	g.P("}")
	g.P("x.dirtyFields[fieldNumber] = true")
	g.P("if x.onDirtyCallback != nil {")
	g.P("x.onDirtyCallback(x, fieldNumber)")
	g.P("}")
	g.P("}")
	g.P()

	// Generate clearDirty method
	g.P("func (x *", typeName, ") clearDirty(fieldNumber int32) {")
	g.P("delete(x.dirtyFields, fieldNumber)")
	g.P("}")
	g.P()

	// Generate clearAllDirty method
	g.P("func (x *", typeName, ") clearAllDirty() {")
	g.P("x.dirtyFields = make(map[int32]bool)")
	g.P("}")
	g.P()

	// Generate setOnDirtyCallback method
	g.P("func (x *", typeName, ") setOnDirtyCallback(callback DirtyCallback) {")
	g.P("x.onDirtyCallback = callback")
	g.P("}")
	g.P()

	// Generate DirtyCallback type
	g.P("type DirtyCallback func(object *", typeName, ", fieldNumber int32)")
	g.P()
}
